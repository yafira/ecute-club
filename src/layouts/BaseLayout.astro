---
const {
  title = "ecute.club",
  description = "a cute, clear guide to electronics",
  ogImage = "/favicon.svg",
  footerText = "soldered with care ♡",
  bodyClass = "bg-grid",
  logoSrc = "/src/assets/ecute.png", // <-- default lives here
} = Astro.props;
---
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImage} />
    <link rel="icon" href="/favicon.svg" />

    <meta id="theme-color" name="theme-color" content="#fffdf9" />
    <meta name="theme-color" media="(prefers-color-scheme: light)" content="#fffdf9" />
    <meta name="theme-color" media="(prefers-color-scheme: dark)" content="#121112" />

    <link href="/styles/global.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:wght@400;500;600;700&family=Caveat:wght@600&display=swap" rel="stylesheet" />
  </head>
  <body class={bodyClass}>
    <header class="site-header">
      <a class="brand" href="/" aria-label="ecute.club home">
        <img class="brand-logo" src={logoSrc} alt="ecute club logo" />
        <span class="brand-text">ecute club</span>
      </a>

      <nav class="site-nav">
        <a href="/guides">guides</a>
        <a href="/guides/circuit-symbols">circuit symbols</a>
        <a href="/guides/tools">tools</a>
        <a href="/guides/books">books</a>
        <button id="themeToggle" class="theme-toggle" aria-label="Toggle dark mode">☼</button>
      </nav>
    </header>

    <main class="container">
      <slot />
    </main>

    <footer class="site-footer">
      <p>{footerText} · <a href="/" aria-label="ecute home">ecute.club</a></p>
    </footer>

   <script>
    // @ts-nocheck

(() => {
  const root = document.documentElement;
  const body = document.body;
  const themeMeta = document.getElementById('theme-color');
  const btn = document.getElementById('themeToggle');

  const THEME_KEY = 'ecute-theme';
  const BG_KEY = 'bgPattern';
  const PATTERNS = ['bg-dots', 'bg-grid', 'bg-lined', 'bg-solid'];

  function updateThemeColorMeta() {
    const bg = getComputedStyle(root).getPropertyValue('--bg').trim() || '#fffdf9';
    if (themeMeta) themeMeta.setAttribute('content', bg);
  }

  /** @typedef {'dark'|'light'} ThemeMode */

  function currentTheme() {
    // support either class or data-attr (your CSS uses :root.dark)
    return root.classList.contains('dark') || root.dataset.theme === 'dark'
      ? 'dark'
      : 'light';
  }

  function applyTheme(/** @type {'dark'|'light'} */ mode) {
    root.dataset.theme = mode;                       // optional, for future use
    root.classList.toggle('dark', mode === 'dark');  // what your CSS uses
    localStorage.setItem(THEME_KEY, mode);
    updateToggleIcon();
    updateThemeColorMeta();
  }

  function toggleTheme() {
    applyTheme(currentTheme() === 'dark' ? 'light' : 'dark');
  }

  function updateToggleIcon() {
    if (!btn) return;
    btn.textContent = currentTheme() === 'dark' ? '☽' : '☼';
  }

  function cyclePattern() {
    const cur = PATTERNS.find(p => body.classList.contains(p)) || 'bg-dots';
    const next = PATTERNS[(PATTERNS.indexOf(cur) + 1) % PATTERNS.length];
    body.classList.remove(...PATTERNS);
    body.classList.add(next);
    localStorage.setItem(BG_KEY, next);
  }

  function restore() {
    const savedTheme = localStorage.getItem(THEME_KEY);
    if (savedTheme === 'dark' || savedTheme === 'light') {
      applyTheme(savedTheme);
    } else {
      updateToggleIcon();
      updateThemeColorMeta();
    }

    const savedPattern = localStorage.getItem(BG_KEY);
    if (savedPattern && PATTERNS.includes(savedPattern)) {
      body.classList.remove(...PATTERNS);
      body.classList.add(savedPattern);
    }
  }

  // Header button
  if (btn) btn.addEventListener('click', toggleTheme);

  // Keyboard shortcuts (ignore when typing)
  window.addEventListener('keydown', (e) => {
    const t = e.target;
    if (t && t instanceof HTMLElement) {
      const tag = t.tagName;
      if (tag === 'INPUT' || tag === 'TEXTAREA' || t.isContentEditable) return;
    }
    const k = e.key.toLowerCase();
    if (k === 'd') toggleTheme();
    if (k === 'g') cyclePattern();
  });

  // Sync across tabs
  window.addEventListener('storage', (e) => {
    if (e.key === THEME_KEY && e.newValue) {
      applyTheme(/** @type {'dark'|'light'} */ (e.newValue));
    }
    if (e.key === BG_KEY && e.newValue && PATTERNS.includes(e.newValue)) {
      body.classList.remove(...PATTERNS);
      body.classList.add(e.newValue);
    }
  });

  // Kick off
  restore();
})();
</script>

  </body>
</html>
